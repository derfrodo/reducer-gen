# This is a basic workflow that is manually triggered
name: Build and publish Beta

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  nodeVersion: 16.x
  packageName: "@derfrodo/reducer-gen"
  artefactName: "derfrodo_reducer-gen"

jobs:
  prepare: 
    runs-on: ubuntu-latest
    name: "Prepare run"
    outputs:
      packageVersion: ${{ steps.read_package_version.outputs.version  }}
    steps:
    - uses: actions/checkout@v2
    - name: Read package version
      run: |
        # See also https://gist.github.com/darrenn/8c6a5b969481725a4413
        # and https://phil.lavin.me.uk/2012/04/trimming-white-space-with-sed/
        PACKAGE_VERSION=$(cat lib/package.json \
          | grep version \
          | head -1 \
          | awk -F: '{ print $2 }' \
          | sed 's/[",]//g' \
          | sed 's/^ *//;s/ *$//')

        echo "Build reducer gen for version '$PACKAGE_VERSION'"
        echo "::set-output name=version::$PACKAGE_VERSION"
      id: read_package_version

    - name: Read Deployed Versions
      run: |
        PACKAGE_VERSIONS=$(npm view ${{ env.packageName }} versions --json)
        # echo $PACKAGE_VERSIONS

        # see also stackoverflow.com/questions/19345872/how-to-remove-a-newline-from-a-string-in-bash
        # SCRIPT="const index=${PACKAGE_VERSIONS//[$'\t\r\n']}.indexOf(\"${{ steps.read_package_version.outputs.version }}\"); console.log({index});"
        SCRIPT="const index=${PACKAGE_VERSIONS}.indexOf(\"${{ steps.read_package_version.outputs.version }}\"); console.log(index);"
        echo $SCRIPT > script.js

        INDEX_OF_VERSION=$(node script.js)

        echo $INDEX_OF_VERSION
        # echo "::set-output name=versions::$PACKAGE_VERSIONS"
        echo "::set-output name=indexofversion::$INDEX_OF_VERSION"
      id: evaluate_package_version

  build:
    # if: ${{ always() }}
    runs-on: ubuntu-latest
    name: "Build package"
    needs: 
    - prepare
    steps:
    - uses: actions/checkout@v2
    - name: Using Node.js ${{ env.nodeVersion }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.nodeVersion }}
    
    - name: perform installation (npm ci)
      shell: bash
      run: cd lib && npm ci
    
    - name: perform unittests
      shell: bash
      run: |
        cd lib
        npm test
    
    - name: build bundle (npm ci)
      shell: bash
      run: cd lib && npm run build
      
    - name: prepare package for publishing
      shell: bash
      run: |
        cd lib
        npm run prepareForPublish

    - name: Archive code 
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.artefactName }}-${{ needs.prepare.outputs.packageVersion }}-run-${{ github.run_id }}
        path: "lib"

  deploy:
    runs-on: ubuntu-latest
    needs: 
    - build
    - prepare
    name: "Deploy package as beta"
    environment: beta
    
    steps:
    - uses: actions/checkout@v2
    - name: Using Node.js ${{ env.nodeVersion }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.nodeVersion }}

    - name: Download artifact from build job
      uses: actions/download-artifact@v3
      id: downloadArtefact
      with:
        name: ${{ env.artefactName }}-${{ needs.prepare.outputs.packageVersion }}-run-${{ github.run_id }}
        path: ${{ env.packageName }}-${{ needs.prepare.outputs.packageVersion }}-artefact

    - name: What has been downloaded
      working-directory: ${{ steps.downloadArtefact.outputs.download-path }}
      run: |
        echo ${{ steps.downloadArtefact.outputs.download-path }}
        ls -R

    - name: Deploy to npm js as beta version
      working-directory: ${{ steps.downloadArtefact.outputs.download-path }}
      env:
        NPM_TOKEN: ${{ secrets.NPM_ACCESS_TOKEN }}
      run: |
        touch .npmrc
        echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" >> .npmrc
        npm publish --access public --tag beta

