import StateInterfaceInfo, {
    StatePropertyInfo,
} from "../interfaces/StateInterfaceInfo";
import ReduxModuleNamingHelperOptions from "../interfaces/ReduxModuleNamingHelperOptions";
import { StringHelper } from "@derfrodo/frodo-s-little-helpers";

export class ReduxModuleNamingHelper {
    private options: ReduxModuleNamingHelperOptions;
    private stringHelper: StringHelper;

    getDoNotOverwriteWarning(): string {
        return `// DO NOT Change anything inside this file. Every time the generator is used, it will be overwritten.
`;
    }

    getGeneralGenertedFileInformation(): string {
        return `// This file has been generated by reducer-gen (@Stefan Pauka) written in 2020.
`;
    }

    constructor(
        options: ReduxModuleNamingHelperOptions,
        stringHelper: StringHelper = new StringHelper()
    ) {
        this.options = options;
        this.stringHelper = stringHelper;
        this.addGeneratedHeader = this.addGeneratedHeader.bind(this);
        this.getFeatureName = this.getFeatureName.bind(this);
        this.getActionStrings = this.getActionStrings.bind(this);
        this.getActionString = this.getActionString.bind(this);
        this.getGetDefaultStateMethodName = this.getGetDefaultStateMethodName.bind(
            this
        );
        this.getReducerMethodName = this.getReducerMethodName.bind(this);
        this.getActionEnumName = this.getActionEnumName.bind(this);
        this.getActionCreatorsName = this.getActionCreatorsName.bind(this);
        this.getReducerActionName = this.getReducerActionName.bind(this);
        this.getReducerActionTypeGuardMethodName = this.getReducerActionTypeGuardMethodName.bind(
            this
        );
    }

    addGeneratedHeader(content: string, omitDoNotOverwrite = false): string {
        const { combine } = this.stringHelper;
        return combine(
            this.getGeneralGenertedFileInformation(),
            omitDoNotOverwrite ? undefined : this.getDoNotOverwriteWarning(),
            `
`,
            content
        );
    }

    /**
     * Simply resolves feature name from state info :)
     * @param stateInfo
     */
    getFeatureName(stateInfo: StateInterfaceInfo): string {
        const { featureData } = stateInfo;
        const { featureName } = featureData;
        return featureName;
    }

    getActionStrings(stateInfo: StateInterfaceInfo): string[] {
        return stateInfo.stateProperties.map((p) =>
            this.getActionString(p, stateInfo)
        );
    }

    getActionString(
        property: StatePropertyInfo,
        stateInfo: StateInterfaceInfo
    ): string {
        const { combine, toUpperCasedWithUnderscore } = this.stringHelper;
        return combine(
            this.options.addFeatureAsActionPrefix
                ? `${toUpperCasedWithUnderscore(
                      this.getFeatureName(stateInfo)
                  )}_`
                : undefined,
            "SET_",
            toUpperCasedWithUnderscore(property.name)
        );
    }

    getGetDefaultStateMethodName(
        stateInfo: StateInterfaceInfo,
        // eslint-disable-next-line @typescript-eslint/no-unused-vars
        modul: "main" | "base" | "ext"
    ): string {
        const { toPascalCased } = this.stringHelper;

        return `get${toPascalCased(
            this.getFeatureName(stateInfo)
        )}DefaultState`;
    }

    getReducerMethodName(
        stateInfo: StateInterfaceInfo,
        modul: "main" | "base" | "ext"
    ): string {
        const { combine, toCamelCased } = this.stringHelper;
        const result = combine(
            toCamelCased(this.getFeatureName(stateInfo)),
            "Reducer",
            modul === "ext" ? "Extended" : modul === "base" ? "Base" : undefined
        );
        return result;
    }

    getActionEnumName(
        stateInfo: StateInterfaceInfo,
        modul: "main" | "base" | "ext"
    ): string {
        const { combine, toUpperCasedWithUnderscore } = this.stringHelper;
        const result = combine(
            toUpperCasedWithUnderscore(this.getFeatureName(stateInfo)),
            "_ACTIONS",
            modul === "ext"
                ? "_EXTENDED"
                : modul === "base"
                ? "_BASE"
                : undefined
        );

        return result;
    }

    getActionCreatorsName(
        stateInfo: StateInterfaceInfo,
        modul: "main" | "base" | "ext"
    ): string {
        const { combine, toCamelCased } = this.stringHelper;
        const result = combine(
            toCamelCased(this.getFeatureName(stateInfo)),
            "ActionCreators",
            modul === "ext" ? "Extended" : modul === "base" ? "Base" : undefined
        );
        return result;
    }

    getReducerActionName(
        stateInfo: StateInterfaceInfo,
        modul: "main" | "base" | "ext"
    ): string {
        const { combine, toPascalCased } = this.stringHelper;
        const result = combine(
            toPascalCased(this.getFeatureName(stateInfo)),
            "ReducerActions",
            modul === "ext" ? "Extended" : modul === "base" ? "Base" : undefined
        );

        return result;
    }

    getReducerActionTypeGuardMethodName(
        stateInfo: StateInterfaceInfo,
        modul: "main" | "base" | "ext"
    ): string {
        const { combine, toPascalCased } = this.stringHelper;
        const result = combine(
            "is",
            toPascalCased(this.getReducerActionName(stateInfo, modul))
        );
        return result;
    }

    getStateInterfaceName(stateInfo: StateInterfaceInfo): string {
        const { stateInterfaceName } = stateInfo;
        return `${stateInterfaceName || "IState"}`;
    }

    getStateInterfaceImportLine(
        stateInfo: StateInterfaceInfo,
        options?: { pathToState?: string }
    ): string {
        const stateName = this.getStateInterfaceName(stateInfo);

        return `import ${
            stateInfo.hasStateAsDefaultExport ? stateName : `{ ${stateName} }`
        } from "${options?.pathToState || "./state"}";`;
    }
}

export default ReduxModuleNamingHelper;
