// Uncomment imports if you need to ;)
{{#each state.importsWithAdditionalLevel}}
// {{this}}
{{/each}}

import { {{reducerActions.extendedReducerActionsName}} } from "./../reducerActions/{{moduleNames.extended.reducerActions}}";
// import { {{actions.extendedActionsEnumName}} } from "./../actions/{{moduleNames.extended.actions}}";

/**
 * You may add here extending actionCreators for this features reducer
 * actionCreator: ([params]): ExtenedReducerAction => (
 * {
 *   type: {{actions.extendedActionsEnumName}}["[actionName]"],
 *   [payload]
 * }),
 */
const extendedActionCreators = {
    // Add functions like
    // addLoadingHandle: (handleToAdd: symbol) => {
    //    return {
    //        type: {{actions.extendedActionsEnumName}}.ADD_LOADING_HANDLE,
    //        handle: handleToAdd
    //        };
    //    },
}

// Start: This is just for typechecking, so that you can utilize the awesomeness of Typescript
type ActionCreator = { [key in string]: (...params: any[]) => {{reducerActions.extendedReducerActionsName}} };

const checkActionCreator: <T>(item: T & ActionCreator) => T = <T>(item: T & ActionCreator) => {
    return item;
};
// End (The function above will be used to create the named export below)

export const {{actionCreators.extendedActionCreatorsName}} = checkActionCreator(extendedActionCreators);

export default {{actionCreators.extendedActionCreatorsName}};
