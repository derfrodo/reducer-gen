    // cases for manipulating property arrays
    {{>currentContext}}
{{#each state.properties}}
    {{#if isArray}}
        case actions.{{arrayActionEnumValues.add}}:
            const { {{name}} } = state;
            {{#propertyCanBeNullOrUndefined this}}
            return {
                ...state,
                {{name}}: [...({{name}} || []), action.next],
            };
            {{else}}
            return {
                ...state,
                {{name}}: [...{{name}}, action.next],
            };
            {{/propertyCanBeNullOrUndefined}}
        case actions.{{arrayActionEnumValues.update}}:
            const { {{name}} } = state;
            {{#propertyCanBeNullOrUndefined this}}
            return {
                ...state,
                {{name}}: {{name}} && {{name}}.length > 0 ? {{name}}.map(item => item === action.next.oldItem ? action.next.nextItem : item) : {{name}},
            };
            {{else}}
            return {
                ...state,
                {{name}}: {{name}}.map(item => item === action.next.oldItem ? action.next.nextItem : item),
            };
            {{/propertyCanBeNullOrUndefined}}
            return {
                ...state,
                {{!-- {{name}}: action.next, --}}
            };
        case actions.{{arrayActionEnumValues.remove}}:
            const { {{name}} } = state;
            {{#propertyCanBeNullOrUndefined this}}
            return {
                ...state,
                {{name}}: {{name}} && {{name}}.length > 0 ? {{name}}.filter(item => item !== action.next) : {{name}},
            };
            {{else}}
            return {
                ...state,
                {{name}}: {{name}}.filter(item => item !== action.next),
            };
            {{/propertyCanBeNullOrUndefined}}
    {{/if}}
{{/each}}