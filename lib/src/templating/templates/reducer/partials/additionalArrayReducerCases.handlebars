    // cases for manipulating property arrays
    {{>currentContext}}
{{#each state.properties}}
    {{#if isArray}}
        case actions.{{arrayActionEnumValues.add}}:
            {{#propertyCanBeNullOrUndefined this}}
            return {
                ...state,
                {{name}}: [...(state.{{name}} || []), action.next],
            };
            {{else}}
            return {
                ...state,
                {{name}}: [...state.{{name}}, action.next],
            };
            {{/propertyCanBeNullOrUndefined}}
        case actions.{{arrayActionEnumValues.update}}:
            const { {{name}} : {{name}}ToBeUpdated } = state;
            {{#propertyCanBeNullOrUndefined this}}
            return {
                ...state,
                {{name}}:
                    {{name}}ToBeUpdated && {{name}}ToBeUpdated.length > 0 ?
                        {{name}}ToBeUpdated.map(item => item === action.next.oldItem ? action.next.nextItem : item) :
                        {{name}}ToBeUpdated,
            };
            {{else}}
            return {
                ...state,
                {{name}}:
                    {{name}}ToBeUpdated.map(item => item === action.next.oldItem ? action.next.nextItem : item),
            };
            {{/propertyCanBeNullOrUndefined}}
        case actions.{{arrayActionEnumValues.remove}}:
            const { {{name}} : {{name}}Old } = state;
            {{#propertyCanBeNullOrUndefined this}}
            return {
                ...state,
                {{name}}: 
                    {{name}}Old && {{name}}Old.length > 0 ?
                        {{name}}Old.filter(item => item !== action.next) :
                        {{name}}Old,
            };
            {{else}}
            return {
                ...state,
                {{name}}:
                    {{name}}Old.filter(item => item !== action.next),
            };
            {{/propertyCanBeNullOrUndefined}}
    {{/if}}
{{/each}}