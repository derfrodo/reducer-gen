{{#each state.importsWithAdditionalLevel}}
{{this}}
{{/each}}
import { {{actions.baseActionsEnumName}} as actions } from "./../actions/{{moduleNames.base.actions}}";
{{#if options.addFunctionalParametersForContextDispatch}}
import type {{#if state.hasStateAsDefaultExport}}{{state.stateName}}{{else}}{ {{state.stateName}} }{{/if}} from "./../state";
{{/if}}

export type {{reducerActions.baseReducerActionsName}} = {
    type: actions;
{{#if options.addBubbleFlagForActions}}
    isBubbled?: boolean;
{{/if}}
    } & ({{#each state.properties}}
    | {
        type: actions.{{baseActionEnumValue}};
        next: {{type}};
    }{{/each}}
{{#if options.addArrayFunctions}}
{{#hasArrayProperties this}}

{{>additionalArrayReducerActions}}
{{/hasArrayProperties}}
{{/if}}
{{#if options.addFunctionalParametersForContextDispatch}}

// Actions for properties using functional parameters
{{#each state.properties}}
    | {
        type: actions.{{baseActionEnumValue}}_FUNCTIONAL;
        next: (state: {{../state.stateName}}) => {{type}};
    }{{/each}}
{{/if}}
);

export const {{reducerActions.baseReducerTypeguard}} = (
    item: any
): item is {{reducerActions.baseReducerActionsName}} => {
    if (!item) {
        return false;
    }
    if (typeof item === "object") {
        const { type } = item;

        return (
            typeof type === "string" &&
            Object.hasOwnProperty.call(actions, type)
        );
    }
    return false;
};

export default {{reducerActions.baseReducerActionsName}};
