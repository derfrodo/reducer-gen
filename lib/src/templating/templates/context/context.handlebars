import React, { useCallback, useEffect, useLayoutEffect, {{#if options.createContextDirectPropertyHooks}}useMemo, {{/if}}useRef, useState } from "react";
import {{#if state.hasStateAsDefaultExport}}{{state.stateName}}{{else}}{ {{state.stateName}} }{{/if}} from "./state";
import { {{reducer.mainReducerName}} } from "./reducer/{{moduleNames.main.reducer}}";
import { {{state.getDefaultStateMethodName}} } from "./{{moduleNames.base.defaultState}}";
import { {{reducerActions.mainReducerActionsName}} } from "./reducerActions/{{moduleNames.main.reducerActions}}";
{{#if options.createContextDirectPropertyHooks}}
import { {{actionCreators.mainActionCreatorsName}} } from "./actionCreators/{{moduleNames.main.actionCreators}}";
import { {{featureName.pascalCase}}StatePropertiesEnum } from "./{{moduleNames.base.stateProperties}}";
{{/if}}

export type On{{featureName.pascalCase}}ReducerContextDispatchWillBeCalled = (action: {{reducerActions.mainReducerActionsName}}) => void;

export interface I{{featureName.pascalCase}}ReducerContext {
    state: {{state.stateName}};
    {{#if options.addGetCurrentStateToContext}}getState: () => {{state.stateName}};
    {{/if}}dispatch: React.Dispatch<{{reducerActions.mainReducerActionsName}}>;
    listenOnDispatchWillBeCalled: (callback: On{{featureName.pascalCase}}ReducerContextDispatchWillBeCalled) => void;
    removeOnDispatchWillBeCalled: (callback: On{{featureName.pascalCase}}ReducerContextDispatchWillBeCalled) => void;
}

export type IDispatch{{featureName.pascalCase}}ReducerContext = React.Dispatch<{{reducerActions.mainReducerActionsName}}>;

export type IState{{featureName.pascalCase}}ReducerContext = {{state.stateName}};

export const {{featureName.pascalCase}}ReducerContext = React.createContext<I{{featureName.pascalCase}}ReducerContext>({
    state: {{state.getDefaultStateMethodName}}(),
    {{#if options.addGetCurrentStateToContext}}getState: () => { throw new Error("Reducer Context {{featureName.pascalCase}}ReducerContext has not been initialized yet. Did you forget to add a provider to the application as parent node?"); },
    {{/if}}dispatch: () => { throw new Error("Reducer Context {{featureName.pascalCase}}ReducerContext has not been initialized yet. Did you forget to add a provider to the application as parent node?"); },
    listenOnDispatchWillBeCalled: () => { throw new Error("Reducer Context {{featureName.pascalCase}}ReducerContext has not been initialized yet. Did you forget to add a provider to the application as parent node?"); },
    removeOnDispatchWillBeCalled: () => { throw new Error("Reducer Context {{featureName.pascalCase}}ReducerContext has not been initialized yet. Did you forget to add a provider to the application as parent node?"); },
});

export const Dispatch{{featureName.pascalCase}}ReducerContext = React.createContext<IDispatch{{featureName.pascalCase}}ReducerContext>(() => undefined);

export const State{{featureName.pascalCase}}ReducerContext = React.createContext<IState{{featureName.pascalCase}}ReducerContext>({{state.getDefaultStateMethodName}}());

{{>reducerContextProvider}}
{{>useReducerContextHooks}}
{{>useStateChangedEffectHooks}}
{{#if options.createContextDirectPropertyHooks}}{{>useDirectProperty}}{{/if}}