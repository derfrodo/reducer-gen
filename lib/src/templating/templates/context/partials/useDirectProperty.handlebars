
/**
 * Use this method if you want to get a single property from state and a callback function for updating it of {{featureName.pascalCase}}
 * @param propertyName property of state
 */
export function useDirect{{featureName.pascalCase}}Property<T extends keyof {{state.stateName}}>(propertyName: T) {
    const dispatch = use{{featureName.pascalCase}}ReducerContextDispatch();
    const value = useDirect{{featureName.pascalCase}}PropertyValue(propertyName);

    const setProperty = useMemo(() => {
        switch (propertyName) {
    {{#each state.properties}}
            case "{{name}}":
                return (next: {{../state.stateName}}["{{name}}"]) =>
                    dispatch(
                        {{../actionCreators.mainActionCreatorsName}}.set{{namePascalCase}}(
                            next
                        )
                    );
    {{/each}}
            default:
                throw new Error(
                    `Unknown property. No property with name "${propertyName}" has been registered for state of feature "{{featureName.pascalCase}}".`
                );
        }
    }, [dispatch, propertyName]);

    return useMemo(() => [value, setProperty], [value, setProperty]);
};

/**
 * Use this method if you want to get only a single property from state of {{featureName.pascalCase}}
 * @param propertyName property of state
 */
export function useDirect{{featureName.pascalCase}}PropertyValue<T extends keyof {{state.stateName}}>(propertyName: T) {
    const state = use{{featureName.pascalCase}}ReducerContextState();
    return state[propertyName];
};
